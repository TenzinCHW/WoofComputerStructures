/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [5:0] aLUFN;
  
  wire [8-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  reg [6-1:0] M_adder_aLUFN;
  adder_1 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .aLUFN(M_adder_aLUFN),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [8-1:0] M_mult_out;
  reg [8-1:0] M_mult_a;
  reg [8-1:0] M_mult_b;
  reg [6-1:0] M_mult_aLUFN;
  multiplier_2 mult (
    .a(M_mult_a),
    .b(M_mult_b),
    .aLUFN(M_mult_aLUFN),
    .out(M_mult_out)
  );
  
  wire [1-1:0] M_shift_out;
  reg [8-1:0] M_shift_a;
  reg [8-1:0] M_shift_b;
  reg [6-1:0] M_shift_aLUFN;
  shifter_3 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .aLUFN(M_shift_aLUFN),
    .out(M_shift_out)
  );
  
  wire [1-1:0] M_bool_out;
  reg [8-1:0] M_bool_a;
  reg [8-1:0] M_bool_b;
  reg [6-1:0] M_bool_aLUFN;
  boolean_4 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .aLUFN(M_bool_aLUFN),
    .out(M_bool_out)
  );
  
  wire [1-1:0] M_compare_out;
  reg [8-1:0] M_compare_a;
  reg [8-1:0] M_compare_b;
  reg [6-1:0] M_compare_aLUFN;
  comparator_5 compare (
    .a(M_compare_a),
    .b(M_compare_b),
    .aLUFN(M_compare_aLUFN),
    .out(M_compare_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    a = io_dip[0+7-:8];
    b = io_dip[8+7-:8];
    aLUFN = io_dip[16+0+5-:6];
    M_adder_a = a;
    M_adder_b = b;
    M_adder_aLUFN = aLUFN;
    M_mult_a = a;
    M_mult_b = b;
    M_mult_aLUFN = aLUFN;
    M_shift_a = a;
    M_shift_b = b[0+2-:3];
    M_shift_aLUFN = aLUFN;
    M_bool_a = a;
    M_bool_b = b;
    M_bool_aLUFN = aLUFN;
    M_compare_a = a;
    M_compare_b = b;
    M_compare_aLUFN = aLUFN;
    io_led[16+0+0-:1] = M_adder_z;
    io_led[16+1+0-:1] = M_adder_v;
    io_led[16+2+0-:1] = M_adder_n;
    
    case (io_dip[16+4+1-:2])
      1'h0: begin
        if (aLUFN[1+0-:1]) begin
          io_led[0+7-:8] = M_mult_out;
        end else begin
          io_led[0+7-:8] = M_adder_out;
        end
      end
      default: begin
        io_led[0+7-:8] = 1'h0;
      end
      1'h1: begin
        io_led[0+7-:8] = M_shift_out;
      end
      2'h2: begin
        io_led[0+7-:8] = M_bool_out;
      end
      2'h3: begin
        io_led[0+7-:8] = 1'h0;
        io_led[0+0+0-:1] = M_compare_out;
      end
    endcase
  end
endmodule
