/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [7:0] inputsToCircuit
  );
  
  
  
  reg rst;
  
  reg [255:0] pattern;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam ONE_state = 3'd0;
  localparam TWO_state = 3'd1;
  localparam THREE_state = 3'd2;
  localparam FOUR_state = 3'd3;
  localparam PO_state = 3'd4;
  localparam PT_state = 3'd5;
  localparam START_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = START_state;
  reg [3:0] M_i_d, M_i_q = 1'h0;
  reg [3:0] M_j_d, M_j_q = 1'h0;
  reg [3:0] M_k_d, M_k_q = 1'h0;
  reg [15:0] M_time_d, M_time_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_time_d = M_time_q;
    M_j_d = M_j_q;
    M_k_d = M_k_q;
    M_i_d = M_i_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    inputsToCircuit = 8'h00;
    pattern = 256'h207c60822002207c2080208070fe00007c0c821402243c44028482fe7c040000;
    
    case (M_state_q)
      ONE_state: begin
        inputsToCircuit[4+0-:1] = 1'h1;
        inputsToCircuit[7+0-:1] = 1'h0;
        inputsToCircuit[5+0-:1] = 1'h0;
        inputsToCircuit[6+0-:1] = clk - 1'h1;
        if (M_j_q == 1'h0) begin
          M_state_d = THREE_state;
          M_j_d = 4'hf;
        end else begin
          M_j_d = M_j_q - 1'h1;
        end
      end
      THREE_state: begin
        inputsToCircuit[3+0-:1] = M_k_q[0+0-:1];
        inputsToCircuit[2+0-:1] = M_k_q[1+0-:1];
        inputsToCircuit[1+0-:1] = M_k_q[2+0-:1];
        inputsToCircuit[0+0-:1] = M_k_q[3+0-:1];
        inputsToCircuit[7+0-:1] = 1'h0;
        inputsToCircuit[4+0-:1] = 1'h1;
        inputsToCircuit[5+0-:1] = pattern[(M_i_q)*16+(M_j_q)*1+0-:1];
        inputsToCircuit[6+0-:1] = clk - 1'h1;
        if (M_j_q == 1'h0) begin
          M_state_d = FOUR_state;
          M_j_d = 4'hf;
        end else begin
          M_j_d = M_j_q - 1'h1;
        end
      end
      FOUR_state: begin
        inputsToCircuit[3+0-:1] = M_k_q[0+0-:1];
        inputsToCircuit[2+0-:1] = M_k_q[1+0-:1];
        inputsToCircuit[1+0-:1] = M_k_q[2+0-:1];
        inputsToCircuit[0+0-:1] = M_k_q[3+0-:1];
        inputsToCircuit[7+0-:1] = 1'h1;
        inputsToCircuit[4+0-:1] = 1'h0;
        M_time_d = M_time_q + 1'h1;
        if (M_time_q == 16'h61a8) begin
          M_time_d = 1'h0;
          if (M_i_q == 1'h0) begin
            M_state_d = START_state;
          end else begin
            M_i_d = M_i_q - 1'h1;
            M_k_d = M_k_q + 1'h1;
            M_state_d = ONE_state;
          end
        end
      end
      START_state: begin
        M_i_d = 4'hf;
        M_j_d = 4'hf;
        M_k_d = 1'h0;
        M_time_d = 1'h0;
        M_state_d = ONE_state;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_i_q <= 1'h0;
      M_j_q <= 1'h0;
      M_k_q <= 1'h0;
      M_time_q <= 1'h0;
    end else begin
      M_i_q <= M_i_d;
      M_j_q <= M_j_d;
      M_k_q <= M_k_d;
      M_time_q <= M_time_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 3'h6;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
