module map (
    input clk,  // clock
    input rst,  // reset
    input next,
    input level[3],
    output pos[20][20],
    output out[20][20]
  ) {
  
  //fsm level(.clk(clk), #INIT(ONE)) = {ONE, TWO, THREE};
  
  sig mapHold[20][20];
  sig startPosHold[20][20];
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      dff start[1];
      dff map[20][20];
      dff startPos[20][20];
      }
  }
  
  // TODO: Change maps to 20 by 20 matrices
  
  always {
    case (level) {
      1: mapHold = {h00000,h00000,h0A0A0,h00808,h04040,h1EDEC,h03030,h14544,h00000,h1F5F4,h0A0A0,h00808,h04040,h1EDEC,h03030,h14544,h00000,h14544,h00000,h00000};
        startPosHold = {h00000,h00000,h08000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000};
      2: mapHold = {h00000,h00000,h0A1A0,h00808,h04044,h21210,h03030,h14444,h00080,h20A08,h0A080,h20808,h04740,h21210,h3B030,h2C544,h20400,h3F608,h00000,h00000};
        startPosHold = {h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h10000,h00000,h00000,h00000,h00000,h00000};
      default: mapHold = {h00000,h00000,h0A000,h00000,h00000,h1E0EC,h03030,h14544,h00000,h1F5F4,h0A0A0,h00808,h04040,h1EDEC,h03030,h14544,h00000,h14544,h00000,h00000};
        startPosHold = c{3x{{h00000}},{h02000},16x{{h00000}}};
      }
    
    if (~start.q) {
      map.d = mapHold;
      startPos.d = startPosHold;
      start.d = 1;
      }
    
    out = map.q;
    pos = startPos.q;
    
    if (next) {
      start.d = 0;  // the only time next can be assigned 1 is when
      // level is changed also.
      }
    
  }
}
