module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output inputsToCircuit[8]        
  ) {
  
  
  sig rst;                  // reset signal
  convertToDisplay convert;
  //move move;
  
  .clk(clk) {
    reset_conditioner reset_cond;
    edge_detector movement[4];
    button_conditioner move_condition[4];
    //button_conditioner up;
    //edge_detector up_edge(#RISE(1), #FALL(0));
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      //map map;
      //collision collide;
      dff start[1];
      toDisplay display;
      dff position[20][20];
      }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    //io_seg = 8hff;          // turn segments off
    //io_sel = 4hf;           // select no digits
    
    //move_condition.in = c{io_button[0], io_button[2+:3]};  // is this 0, 2, 3, 4?
    move_condition.in[0] = io_button[0];  // UP
    move_condition.in[1] = io_button[2];  // DOWN
    move_condition.in[2] = io_button[3];  // LEFT
    move_condition.in[3] = io_button[4];  // RIGHT
    movement.in = move_condition.out;  // these are your buttons
    
    //if (~start.q) {
    //  position.d = {h00000,h00000,h08000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000,h00000};
    //  start.d = 1;
    //  }
    
    // plug in movement buttons to move, collision
    //move.movement = movement.out;
    //move.position = position.q;
    //position.d = move.out;
    
    // if no collision then get the output from move
    // otherwise just dun do anything.
    // if move, then check for win condition.
    
    io_led[1][6:2] = io_button[4:0];
    
    position.d[5] = movement.out;
    convert.map = 20x{{h00000}};
    convert.position = position.q;
    //convert.position = position.q;
    
    display.pattern = convert.out;
    inputsToCircuit = display.inputsToCircuit;
    }
}
