module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output inputsToCircuit[8]        
  ) {
  
  
  sig rst;                  // reset signal
  convertToDisplay convert;
  
  .clk(clk) {
    reset_conditioner reset_cond;
    //button_conditioner up;
    //edge_detector up_edge(#RISE(1), #FALL(0));
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      map map;
      toDisplay display;
      fsm state(.clk(clk), #INIT(START)) = {ONE,TWO,THREE,FOUR,PO,PT,START};
      //timechange changeState;
      dff i[4];
      dff j[4];
      dff k[4];
      dff start[1];
      dff time[16][16];
      }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    map.level = io_button[2:0];
    map.next = io_button[3];
    
    //up.in = io_button[0];
    //up_edge.in = up.out;
    
    //if (up_edge.out){
    //  time.d[0] = time.q[0] + 1;
    //  }
    
    //display.pattern = ~time.q;
    
    convert.map = ~map.out;
    convert.position = 20x{{h00000}};
    
    display.pattern = convert.out;
    inputsToCircuit = display.inputsToCircuit;
    }
}
