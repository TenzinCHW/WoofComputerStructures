/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [7:0] inputsToCircuit
  );
  
  
  
  reg rst;
  
  wire [256-1:0] M_convert_out;
  reg [400-1:0] M_convert_map;
  reg [400-1:0] M_convert_position;
  convertToDisplay_1 convert (
    .map(M_convert_map),
    .position(M_convert_position),
    .out(M_convert_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [400-1:0] M_map_out;
  reg [1-1:0] M_map_next;
  reg [3-1:0] M_map_level;
  map_3 map (
    .clk(clk),
    .rst(rst),
    .next(M_map_next),
    .level(M_map_level),
    .out(M_map_out)
  );
  wire [8-1:0] M_display_inputsToCircuit;
  reg [256-1:0] M_display_pattern;
  toDisplay_4 display (
    .clk(clk),
    .rst(rst),
    .pattern(M_display_pattern),
    .inputsToCircuit(M_display_inputsToCircuit)
  );
  localparam ONE_state = 3'd0;
  localparam TWO_state = 3'd1;
  localparam THREE_state = 3'd2;
  localparam FOUR_state = 3'd3;
  localparam PO_state = 3'd4;
  localparam PT_state = 3'd5;
  localparam START_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = START_state;
  reg [3:0] M_i_d, M_i_q = 1'h0;
  reg [3:0] M_j_d, M_j_q = 1'h0;
  reg [3:0] M_k_d, M_k_q = 1'h0;
  reg [0:0] M_start_d, M_start_q = 1'h0;
  reg [255:0] M_time_d, M_time_q = 1'h0;
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_map_level = io_button[0+2-:3];
    M_map_next = io_button[3+0-:1];
    M_convert_map = ~M_map_out;
    M_convert_position = 400'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    M_display_pattern = M_convert_out;
    inputsToCircuit = M_display_inputsToCircuit;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_i_q <= 1'h0;
      M_j_q <= 1'h0;
      M_k_q <= 1'h0;
      M_start_q <= 1'h0;
      M_time_q <= 1'h0;
    end else begin
      M_i_q <= M_i_d;
      M_j_q <= M_j_d;
      M_k_q <= M_k_d;
      M_start_q <= M_start_d;
      M_time_q <= M_time_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 3'h6;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
