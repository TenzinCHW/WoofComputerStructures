/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [7:0] inputsToCircuit
  );
  
  
  
  reg rst;
  
  wire [256-1:0] M_convert_out;
  reg [400-1:0] M_convert_map;
  reg [400-1:0] M_convert_position;
  convertToDisplay_1 convert (
    .map(M_convert_map),
    .position(M_convert_position),
    .out(M_convert_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [(3'h4+0)-1:0] M_movement_out;
  reg [(3'h4+0)-1:0] M_movement_in;
  
  genvar GEN_movement0;
  generate
  for (GEN_movement0=0;GEN_movement0<3'h4;GEN_movement0=GEN_movement0+1) begin: movement_gen_0
    edge_detector_3 movement (
      .clk(clk),
      .in(M_movement_in[GEN_movement0*(1)+(1)-1-:(1)]),
      .out(M_movement_out[GEN_movement0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h4+0)-1:0] M_move_condition_out;
  reg [(3'h4+0)-1:0] M_move_condition_in;
  
  genvar GEN_move_condition0;
  generate
  for (GEN_move_condition0=0;GEN_move_condition0<3'h4;GEN_move_condition0=GEN_move_condition0+1) begin: move_condition_gen_0
    button_conditioner_4 move_condition (
      .clk(clk),
      .in(M_move_condition_in[GEN_move_condition0*(1)+(1)-1-:(1)]),
      .out(M_move_condition_out[GEN_move_condition0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  reg [0:0] M_start_d, M_start_q = 1'h0;
  wire [8-1:0] M_display_inputsToCircuit;
  reg [256-1:0] M_display_pattern;
  toDisplay_5 display (
    .clk(clk),
    .rst(rst),
    .pattern(M_display_pattern),
    .inputsToCircuit(M_display_inputsToCircuit)
  );
  reg [399:0] M_position_d, M_position_q = 1'h0;
  
  always @* begin
    M_position_d = M_position_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_move_condition_in[0+0-:1] = io_button[0+0-:1];
    M_move_condition_in[1+0-:1] = io_button[2+0-:1];
    M_move_condition_in[2+0-:1] = io_button[3+0-:1];
    M_move_condition_in[3+0-:1] = io_button[4+0-:1];
    M_movement_in = M_move_condition_out;
    io_led[8+2+4-:5] = io_button[0+4-:5];
    M_position_d[100+19-:20] = M_movement_out;
    M_convert_map = 400'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    M_convert_position = M_position_q;
    M_display_pattern = M_convert_out;
    inputsToCircuit = M_display_inputsToCircuit;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_start_q <= 1'h0;
      M_position_q <= 1'h0;
    end else begin
      M_start_q <= M_start_d;
      M_position_q <= M_position_d;
    end
  end
  
endmodule
