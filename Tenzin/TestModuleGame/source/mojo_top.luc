module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input direction[4],     // my direction input
    input showwin[1],          // show winning spot
    input myreset[1],          // custom reset button
    input io_dip [3][8],     // DIP switches on IO Shield
    output matrix[8]
  ) {
  
  sig rst;                  // reset signal
  sig newrst;
  sig dir[4];
  sig win;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    reset_conditioner myreset_cond;
    button_conditioner directions[4];
    button_conditioner win_cond;
    .rst(rst){
      controller control;      
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    myreset_cond.in = ~myreset;
    newrst = myreset_cond.out;        
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    directions.in = ~direction;
    win_cond.in = ~showwin;
    dir[0] = directions.out[0];
    dir[1] = directions.out[1];
    dir[2] = directions.out[2];
    dir[3] = directions.out[3];
    win = win_cond.out;
    
    control.buttons[0] = dir[0];
    control.buttons[1] = dir[1];
    control.buttons[2] = dir[2];
    control.buttons[3] = dir[3];
    control.winButton = win;
    
    matrix = control.out;
  }
}