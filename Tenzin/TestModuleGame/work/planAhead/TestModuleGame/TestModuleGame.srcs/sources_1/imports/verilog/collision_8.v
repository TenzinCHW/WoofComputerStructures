/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module collision_8 (
    input clk,
    input rst,
    input [3:0] movement,
    input [399:0] map,
    input [399:0] position,
    output reg [0:0] out
  );
  
  
  
  wire [1-1:0] M_upDown_out;
  reg [1-1:0] M_upDown_upDown;
  reg [400-1:0] M_upDown_map;
  reg [400-1:0] M_upDown_position;
  checkUpDown_9 upDown (
    .upDown(M_upDown_upDown),
    .map(M_upDown_map),
    .position(M_upDown_position),
    .out(M_upDown_out)
  );
  
  wire [1-1:0] M_leftRight_out;
  reg [400-1:0] M_leftRight_map;
  reg [400-1:0] M_leftRight_position;
  reg [1-1:0] M_leftRight_leftRight;
  checkLeftRight_10 leftRight (
    .map(M_leftRight_map),
    .position(M_leftRight_position),
    .leftRight(M_leftRight_leftRight),
    .out(M_leftRight_out)
  );
  
  localparam STATIONARY_direction = 3'd0;
  localparam UP_direction = 3'd1;
  localparam DOWN_direction = 3'd2;
  localparam LEFT_direction = 3'd3;
  localparam RIGHT_direction = 3'd4;
  
  reg [2:0] M_direction_d, M_direction_q = STATIONARY_direction;
  
  always @* begin
    M_direction_d = M_direction_q;
    
    out = 1'h1;
    
    case (movement)
      1'h0: begin
        M_direction_d = STATIONARY_direction;
      end
      1'h1: begin
        M_direction_d = UP_direction;
      end
      2'h2: begin
        M_direction_d = DOWN_direction;
      end
      3'h4: begin
        M_direction_d = LEFT_direction;
      end
      4'h8: begin
        M_direction_d = RIGHT_direction;
      end
    endcase
    M_upDown_map = map;
    M_upDown_position = position;
    M_upDown_upDown = 1'h0;
    M_leftRight_map = map;
    M_leftRight_position = position;
    M_leftRight_leftRight = 1'h0;
    
    case (M_direction_q)
      STATIONARY_direction: begin
        out = 1'h0;
      end
      UP_direction: begin
        M_upDown_upDown = 1'h1;
        out = M_upDown_out;
      end
      DOWN_direction: begin
        M_upDown_upDown = 1'h0;
        out = M_upDown_out;
      end
      LEFT_direction: begin
        M_leftRight_leftRight = 1'h0;
        out = M_leftRight_out;
      end
      RIGHT_direction: begin
        M_leftRight_leftRight = 1'h1;
        out = M_leftRight_out;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_direction_q <= 1'h0;
    end else begin
      M_direction_q <= M_direction_d;
    end
  end
  
endmodule
