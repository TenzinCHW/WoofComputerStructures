/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module controller_2 (
    input clk,
    input rst,
    input [3:0] buttons,
    output reg [7:0] out
  );
  
  
  
  wire [256-1:0] M_convert_out;
  reg [400-1:0] M_convert_map;
  reg [400-1:0] M_convert_position;
  convertToDisplay_3 convert (
    .map(M_convert_map),
    .position(M_convert_position),
    .out(M_convert_out)
  );
  
  reg [24:0] temp;
  
  wire [400-1:0] M_move_out;
  reg [4-1:0] M_move_movement;
  reg [400-1:0] M_move_position;
  move_4 move (
    .movement(M_move_movement),
    .position(M_move_position),
    .out(M_move_out)
  );
  
  reg [3:0] moveHold;
  
  reg [0:0] M_start_d, M_start_q = 1'h0;
  reg [399:0] M_position_d, M_position_q = 1'h0;
  localparam STATIONARY_state = 3'd0;
  localparam UP_state = 3'd1;
  localparam DOWN_state = 3'd2;
  localparam LEFT_state = 3'd3;
  localparam RIGHT_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = STATIONARY_state;
  wire [8-1:0] M_display_inputsToCircuit;
  reg [256-1:0] M_display_pattern;
  toDisplay_5 display (
    .clk(clk),
    .rst(rst),
    .pattern(M_display_pattern),
    .inputsToCircuit(M_display_inputsToCircuit)
  );
  reg [24:0] M_timer_d, M_timer_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_position_d = M_position_q;
    M_start_d = M_start_q;
    M_timer_d = M_timer_q;
    
    
    case (buttons)
      1'h1: begin
        M_state_d = UP_state;
      end
      2'h2: begin
        M_state_d = DOWN_state;
      end
      3'h4: begin
        M_state_d = LEFT_state;
      end
      4'h8: begin
        M_state_d = RIGHT_state;
      end
    endcase
    
    case (M_state_q)
      UP_state: begin
        moveHold = 4'h1;
      end
      DOWN_state: begin
        moveHold = 4'h2;
      end
      LEFT_state: begin
        moveHold = 4'h4;
      end
      RIGHT_state: begin
        moveHold = 4'h8;
      end
      default: begin
        moveHold = 4'h0;
      end
    endcase
    M_timer_d = M_timer_q + 1'h1;
    temp = M_timer_q - 1'h1;
    if (M_timer_q[24+0-:1] ^ temp[24+0-:1]) begin
      M_move_movement = moveHold;
    end else begin
      M_move_movement = 4'h0;
    end
    M_move_position = M_position_q;
    M_position_d = M_move_out;
    if (M_timer_q[24+0-:1]) begin
      M_convert_position = M_move_out;
    end else begin
      M_convert_position = 400'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
    M_convert_map = 400'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    M_display_pattern = M_convert_out;
    out = M_display_inputsToCircuit;
    if (~M_start_q) begin
      M_position_d = 400'h0000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
      M_start_d = 1'h1;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_start_q <= 1'h0;
      M_position_q <= 1'h0;
      M_timer_q <= 1'h0;
    end else begin
      M_start_q <= M_start_d;
      M_position_q <= M_position_d;
      M_timer_q <= M_timer_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
