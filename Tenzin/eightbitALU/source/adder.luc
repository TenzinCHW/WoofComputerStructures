module adder (
    output out[8],
    output z[1],
    output v[1],
    output n[1],
    input a[8],
    input b[8],
    input aLUFN[6]
  ) {
  sig p[8];  // Acts as temp variable since out is output
  // out cannot be read i.e. 
  
  always {
    p = 8b0;
    out = p;  // always block is like a while(true) block
    // only need to specify that out is equal to p here.
    case (aLUFN[1:0]) {
      0: p = a + b;
      1: p = a - b;
      2: p = a * b;
      default: p = 0;
      }
    case (p) {
      0: z = 1;
      default: z = 0;
      }
    n = p[7];
    v = (a[7] & (b[7] ^ aLUFN[0]) & !p[7]) | (!a[7] & !(b[7] ^ aLUFN[0]) & p[7]);
  }
}
