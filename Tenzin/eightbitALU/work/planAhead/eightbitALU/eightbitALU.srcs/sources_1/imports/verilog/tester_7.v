/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tester_7 (
    input clk,
    input rst,
    output reg [7:0] out,
    output reg [7:0] a,
    output reg [7:0] b,
    input [0:0] ab,
    input [5:0] aLUFN
  );
  
  
  
  reg [24:0] M_generateAB_d, M_generateAB_q = 1'h0;
  
  reg [7:0] zerozero;
  
  reg [7:0] zeroone;
  
  reg [7:0] onezero;
  
  reg [7:0] oneone;
  
  reg [7:0] asig;
  
  reg [7:0] bsig;
  
  always @* begin
    M_generateAB_d = M_generateAB_q;
    
    if (ab) begin
      M_generateAB_d = M_generateAB_q + 2'h3;
    end
    asig = M_generateAB_q[11+7-:8];
    bsig = M_generateAB_q[16+7-:8];
    
    case (aLUFN[4+1-:2])
      1'h0: begin
        
        case (aLUFN[0+0-:1])
          1'h0: begin
            out = asig + bsig;
          end
          1'h1: begin
            out = asig - bsig;
          end
          default: begin
            out = 1'h0;
          end
        endcase
        
        case (aLUFN[1+0-:1])
          1'h0: begin
            out = asig / bsig;
          end
          1'h1: begin
            out = asig * bsig;
          end
          default: begin
            out = 1'h0;
          end
        endcase
      end
      1'h1: begin
        bsig[3+4-:5] = 1'h0;
        
        case (aLUFN[0+1-:2])
          1'h0: begin
            out = asig << bsig;
          end
          1'h1: begin
            out = asig >> bsig;
          end
          2'h2: begin
            out = $signed(asig) <<< bsig;
          end
          2'h3: begin
            out = $signed(asig) >>> bsig;
          end
          default: begin
            out = 1'h0;
          end
        endcase
      end
      2'h2: begin
        zerozero = ~asig & ~bsig & {4'h8{aLUFN[0+0-:1]}};
        zeroone = asig & ~bsig & {4'h8{aLUFN[1+0-:1]}};
        onezero = ~asig & bsig & {4'h8{aLUFN[2+0-:1]}};
        oneone = asig & bsig & {4'h8{aLUFN[3+0-:1]}};
        out = (zerozero | zeroone | onezero | oneone);
      end
      2'h3: begin
        out = 1'h0;
        
        case (aLUFN[1+1-:2])
          1'h1: begin
            out[0+0-:1] = (asig == bsig);
          end
          2'h2: begin
            out[0+0-:1] = (asig < bsig);
          end
          2'h3: begin
            out[0+0-:1] = (asig <= bsig);
          end
          default: begin
            out[0+0-:1] = 1'h0;
          end
        endcase
      end
    endcase
    a = asig;
    b = bsig;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_generateAB_q <= 1'h0;
    end else begin
      M_generateAB_q <= M_generateAB_d;
    end
  end
  
endmodule
