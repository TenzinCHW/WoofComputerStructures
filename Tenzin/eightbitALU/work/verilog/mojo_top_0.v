/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [5:0] aLUFN;
  
  reg [7:0] out;
  
  wire [8-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  reg [6-1:0] M_adder_aLUFN;
  adder_1 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .aLUFN(M_adder_aLUFN),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [1-1:0] M_mult_out;
  reg [8-1:0] M_mult_a;
  reg [8-1:0] M_mult_b;
  reg [6-1:0] M_mult_aLUFN;
  multiplier_2 mult (
    .a(M_mult_a),
    .b(M_mult_b),
    .aLUFN(M_mult_aLUFN),
    .out(M_mult_out)
  );
  
  wire [8-1:0] M_shifter_out;
  reg [8-1:0] M_shifter_a;
  reg [3-1:0] M_shifter_b;
  reg [6-1:0] M_shifter_aLUFN;
  shifter_3 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .aLUFN(M_shifter_aLUFN),
    .out(M_shifter_out)
  );
  
  wire [8-1:0] M_bool_out;
  reg [8-1:0] M_bool_a;
  reg [8-1:0] M_bool_b;
  reg [6-1:0] M_bool_aLUFN;
  boolean_4 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .aLUFN(M_bool_aLUFN),
    .out(M_bool_out)
  );
  
  wire [1-1:0] M_comparer_out;
  reg [8-1:0] M_comparer_a;
  reg [8-1:0] M_comparer_b;
  reg [6-1:0] M_comparer_aLUFN;
  compare_5 comparer (
    .a(M_comparer_a),
    .b(M_comparer_b),
    .aLUFN(M_comparer_aLUFN),
    .out(M_comparer_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [8-1:0] M_tester_out;
  wire [8-1:0] M_tester_a;
  wire [8-1:0] M_tester_b;
  reg [1-1:0] M_tester_ab;
  reg [6-1:0] M_tester_aLUFN;
  tester_7 tester (
    .clk(clk),
    .rst(rst),
    .ab(M_tester_ab),
    .aLUFN(M_tester_aLUFN),
    .out(M_tester_out),
    .a(M_tester_a),
    .b(M_tester_b)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = 8'hff;
    io_sel = 4'hf;
    a = 1'h0;
    b = 1'h0;
    aLUFN = io_dip[16+0+5-:6];
    M_tester_aLUFN = aLUFN;
    M_tester_ab = io_button[1+0-:1];
    
    case (io_dip[16+7+0-:1])
      1'h0: begin
        a = io_dip[0+7-:8];
        b = io_dip[8+7-:8];
      end
      1'h1: begin
        a = M_tester_a;
        b = M_tester_b;
      end
    endcase
    M_adder_a = a;
    M_adder_b = b;
    M_adder_aLUFN = aLUFN;
    M_mult_a = a;
    M_mult_b = b;
    M_mult_aLUFN = aLUFN;
    M_shifter_a = a;
    M_shifter_b = b[0+2-:3];
    M_shifter_aLUFN = aLUFN;
    M_bool_a = a;
    M_bool_b = b;
    M_bool_aLUFN = aLUFN;
    M_comparer_a = a;
    M_comparer_b = b;
    M_comparer_aLUFN = aLUFN;
    led[2+5-:6] = aLUFN;
    io_led[16+0+0-:1] = M_adder_z;
    io_led[16+1+0-:1] = M_adder_v;
    io_led[16+2+0-:1] = M_adder_n;
    
    case (io_dip[16+4+1-:2])
      1'h0: begin
        if (aLUFN[2+0-:1]) begin
          out = M_mult_out;
        end else begin
          out = M_adder_out;
        end
      end
      1'h1: begin
        out = M_shifter_out;
      end
      2'h2: begin
        out = M_bool_out;
      end
      2'h3: begin
        out = 1'h0;
        out[0+0-:1] = M_comparer_out;
      end
      default: begin
        io_led[0+7-:8] = 1'h0;
      end
    endcase
    io_led[0+7-:8] = out;
    if (io_dip[16+7+0-:1]) begin
      io_led[8+7-:8] = M_tester_out;
      if (out != M_tester_out) begin
        io_led[16+7+0-:1] = 1'h1;
      end else begin
        io_led[16+7+0-:1] = 1'h0;
      end
    end
  end
endmodule
